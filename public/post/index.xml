<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PrimerPy</title>
    <link>http://www.primerpy.com/post/</link>
    <description>Recent content on PrimerPy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>isaaczhou85@gmail.com (Isaac Zhou)</managingEditor>
    <webMaster>isaaczhou85@gmail.com (Isaac Zhou)</webMaster>
    <lastBuildDate>Wed, 08 Nov 2017 00:00:00 -0500</lastBuildDate>
    
	<atom:link href="http://www.primerpy.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Prep &amp; Review</title>
      <link>http://www.primerpy.com/post/python/multiple-plots-prep/</link>
      <pubDate>Wed, 08 Nov 2017 00:00:00 -0500</pubDate>
      <author>isaaczhou85@gmail.com (Isaac Zhou)</author>
      <guid>http://www.primerpy.com/post/python/multiple-plots-prep/</guid>
      <description>First, let&amp;rsquo;s review how to create single chart. We&amp;rsquo;ll use unemployment data from US Bureau of Labor Statistics. Here are the steps
 Use pandas to load a csv file to a DataFrame Use Pandas.to_datetime to convert the DATE column into a Series of datetime values Create a line chart that visualize the unemployment from 1948:  x-values should be the first 12 values in the DATE column y-values should be the first 12 values in the VALUE column  Formatting the chart  use pyplot.</description>
    </item>
    
    <item>
      <title>Binary Addition</title>
      <link>http://www.primerpy.com/post/python/binary-addition/</link>
      <pubDate>Sat, 11 Nov 2017 00:00:00 +0000</pubDate>
      <author>isaaczhou85@gmail.com (Isaac Zhou)</author>
      <guid>http://www.primerpy.com/post/python/binary-addition/</guid>
      <description>We can add binary numbers together, just like we can with base 10 numbers
In the example below:
 a is in base 10 &amp;ndash; because we have 10 possible digits, the highest value we can represent with one digit is 9 When we want to represent a value one higher, we need to add another digit. a now has two digits &amp;ndash; we incremented the invisible leading digit, which was 0 and is now 1, and set the last digit back to zero.</description>
    </item>
    
    <item>
      <title>ES2015</title>
      <link>http://www.primerpy.com/post/js/es2015/</link>
      <pubDate>Mon, 06 Nov 2017 00:00:00 +0000</pubDate>
      <author>isaaczhou85@gmail.com (Isaac Zhou)</author>
      <guid>http://www.primerpy.com/post/js/es2015/</guid>
      <description>ES6 has brought a huge number of updates to the Javascript languages. Some of them are extremely handy such as arrow functions. However, we also need to pay extra attention to some of the nitty gritty nuisances. For example, arrow functions are nice and succinct however it doesn&#39;t have its own this or arguments keywords, which could be useful for some cases but the coder need to really understand the context.</description>
    </item>
    
    <item>
      <title>Python Function</title>
      <link>http://www.primerpy.com/post/python/python-function/</link>
      <pubDate>Sun, 05 Nov 2017 00:00:00 +0000</pubDate>
      <author>isaaczhou85@gmail.com (Isaac Zhou)</author>
      <guid>http://www.primerpy.com/post/python/python-function/</guid>
      <description>Function is a powerful concept in any programming languages. It&#39;s very useful to avoid repetitive coding or WET (Write Everything Twice+) coding style. Instead we should promote DRY (Don&#39;t Repeat Yourself) style. In this tutorial, we will only cover the basics about the Python Functions. How to define a function, parameters (single, multiple, optional), return multiple values, write proper docstrings to document the function. At the end of the project, I also provided a synthesis exercise to show how to build a function and use it conveniently in a more real world scenario.</description>
    </item>
    
    <item>
      <title>Javascript keyword &#34;this&#34;</title>
      <link>http://www.primerpy.com/post/js/the-keyword-this/</link>
      <pubDate>Sat, 04 Nov 2017 00:00:00 +0000</pubDate>
      <author>isaaczhou85@gmail.com (Isaac Zhou)</author>
      <guid>http://www.primerpy.com/post/js/the-keyword-this/</guid>
      <description>&#34;this&#34; is a reserved keyword in Javscript. It is usually determined by how a function is called (&#34;execution context&#34;). It can&#39;t be set by assignment during execution, and it may be different each time the function is called. Whenever a javascript function is run, two js keywords are given to that function: &#34;arguments&#34; and &#34;this&#34;. &#34;this&#34; can be determined using four rules: Global, Implicit, Explicit and New. We also discuss how to use apply, call and bind functions to apply the explicit rules.</description>
    </item>
    
    <item>
      <title>Python Fundamentals</title>
      <link>http://www.primerpy.com/post/python/python-fundamentals/</link>
      <pubDate>Sat, 04 Nov 2017 00:00:00 +0000</pubDate>
      <author>isaaczhou85@gmail.com (Isaac Zhou)</author>
      <guid>http://www.primerpy.com/post/python/python-fundamentals/</guid>
      <description>In this tutorial, we will learn all the basics to start with Python. Topics covered here includes data types, lists, loops, dictionary etc. We will also take a peek at some more advanced techniques such as list comprehension and dictionary comprehension. Although there are a number of libraries that can make a Pythonist&#39;s life even easier, have a solid foundation would be a key to understand and learn more advanced topics.</description>
    </item>
    
    <item>
      <title>D3 Embedded with Jupyter Notebook</title>
      <link>http://www.primerpy.com/post/js/d3-visualization-embedded-in-jupyter-notebook/</link>
      <pubDate>Fri, 03 Nov 2017 00:00:00 +0000</pubDate>
      <author>isaaczhou85@gmail.com (Isaac Zhou)</author>
      <guid>http://www.primerpy.com/post/js/d3-visualization-embedded-in-jupyter-notebook/</guid>
      <description>In this tutorial, I will embed D3 object into Jupyter Notebook. It&#39;s not recommended to write D3 or javascript in general with Jupyter notebook, but I could see some benefits from a literate programming perspective. I can see the results right away instead of rendering the whole html page or use Blockbuilder, which is actually pretty neat. I would definitely use blockbuilder on the fly or learn from others&#39; works. Another benefit of using Jupyter notebook is to conveniently use Python to generate data and assign it to the D3 object.</description>
    </item>
    
    <item>
      <title>D3 Visualization Enter-Append method</title>
      <link>http://www.primerpy.com/post/js/enter-append/</link>
      <pubDate>Fri, 03 Nov 2017 00:00:00 +0000</pubDate>
      <author>isaaczhou85@gmail.com (Isaac Zhou)</author>
      <guid>http://www.primerpy.com/post/js/enter-append/</guid>
      <description>D3-Visualization-Enter-Append What if we don&#39;t have elements predefined in svg? What should we do to add/match data with DOM element? We can use enter.append() method  Untitled2  /*! * * Twitter Bootstrap * */ /*! * Bootstrap v3.3.7 (http://getbootstrap.com) * Copyright 2011-2016 Twitter, Inc. * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE) */ /*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */ html { font-family: sans-serif; -ms-text-size-adjust: 100%; -webkit-text-size-adjust: 100%; } body { margin: 0; } article, aside, details, figcaption, figure, footer, header, hgroup, main, menu, nav, section, summary { display: block; } audio, canvas, progress, video { display: inline-block; vertical-align: baseline; } audio:not([controls]) { display: none; height: 0; } [hidden], template { display: none; } a { background-color: transparent; } a:active, a:hover { outline: 0; } abbr[title] { border-bottom: 1px dotted; } b, strong { font-weight: bold; } dfn { font-style: italic; } h1 { font-size: 2em; margin: 0.</description>
    </item>
    
    <item>
      <title>Advanced Javascript Array Methods</title>
      <link>http://www.primerpy.com/post/js/advanced-array-methods/</link>
      <pubDate>Thu, 02 Nov 2017 00:00:00 +0000</pubDate>
      <author>isaaczhou85@gmail.com (Isaac Zhou)</author>
      <guid>http://www.primerpy.com/post/js/advanced-array-methods/</guid>
      <description>forEach  Iterates through an array Runs a callback function on each value in the array always returns &amp;ldquo;undefined&amp;rdquo;  var arr = [1,2,3,5] arr.forEach(function(d,i,arr){ console.log(d,i); });   How does forEach work  var forEach = (arr, callback) =&amp;gt; { for(var i = 0; i &amp;lt; arr.length; i++) { callback(arr[i],i,arr); } }   Using forEach in a function  var halfValues = (arr) =&amp;gt; { let newArr = []; arr.</description>
    </item>
    
    <item>
      <title>JS Closure</title>
      <link>http://www.primerpy.com/post/js/js-closure/</link>
      <pubDate>Thu, 02 Nov 2017 00:00:00 +0000</pubDate>
      <author>isaaczhou85@gmail.com (Isaac Zhou)</author>
      <guid>http://www.primerpy.com/post/js/js-closure/</guid>
      <description>Definition  A closure is a function that makes use of variables defined in outer functions that have previously returned We have to &amp;ldquo;return&amp;rdquo; the inner function for this to work We can either call the inner function right away by using an extra () or we can store the result of the function in a variable Closure only exists when an inner function makes use of variables defined from an outer function that has returned.</description>
    </item>
    
  </channel>
</rss>