<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Advanced Javascript on PrimerPy</title>
    <link>http://www.primerpy.com/tags/advanced-javascript/</link>
    <description>Recent content in Advanced Javascript on PrimerPy</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>isaaczhou85@gmail.com (Isaac Zhou)</managingEditor>
    <webMaster>isaaczhou85@gmail.com (Isaac Zhou)</webMaster>
    <lastBuildDate>Sat, 04 Nov 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://www.primerpy.com/tags/advanced-javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Javascript keyword &#34;this&#34;</title>
      <link>http://www.primerpy.com/post/the-keyword-this/</link>
      <pubDate>Sat, 04 Nov 2017 00:00:00 +0000</pubDate>
      <author>isaaczhou85@gmail.com (Isaac Zhou)</author>
      <guid>http://www.primerpy.com/post/the-keyword-this/</guid>
      <description>&#34;this&#34; is a reserved keyword in Javscript. It is usually determined by how a function is called (&#34;execution context&#34;).Whenever a javascript function is run, two js keywords are given to that function: &#34;arguments&#34; and &#34;this&#34;. &#34;this&#34; can be determined using four rules: Global, Implicit, Explicit and New. We also discuss how to use apply, call and bind functions to apply the explicit rules.  The Keyword &#34;this&#34;  /*! * * Twitter Bootstrap * */ /*!</description>
    </item>
    
    <item>
      <title>Advanced Javascript Array Methods</title>
      <link>http://www.primerpy.com/post/advanced-array-methods/</link>
      <pubDate>Thu, 02 Nov 2017 00:00:00 +0000</pubDate>
      <author>isaaczhou85@gmail.com (Isaac Zhou)</author>
      <guid>http://www.primerpy.com/post/advanced-array-methods/</guid>
      <description>forEach  Iterates through an array Runs a callback function on each value in the array always returns &amp;ldquo;undefined&amp;rdquo;  var arr = [1,2,3,5] arr.forEach(function(d,i,arr){ console.log(d,i); });   How does forEach work  var forEach = (arr, callback) =&amp;gt; { for(var i = 0; i &amp;lt; arr.length; i++) { callback(arr[i],i,arr); } }   Using forEach in a function  var halfValues = (arr) =&amp;gt; { let newArr = []; arr.</description>
    </item>
    
    <item>
      <title>JS Closure</title>
      <link>http://www.primerpy.com/post/js-closure/</link>
      <pubDate>Thu, 02 Nov 2017 00:00:00 +0000</pubDate>
      <author>isaaczhou85@gmail.com (Isaac Zhou)</author>
      <guid>http://www.primerpy.com/post/js-closure/</guid>
      <description>Definition  A closure is a function that makes use of variables defined in outer functions that have previously returned We have to &amp;ldquo;return&amp;rdquo; the inner function for this to work We can either call the inner function right away by using an extra () or we can store the result of the function in a variable Closure only exists when an inner function makes use of variables defined from an outer function that has returned.</description>
    </item>
    
  </channel>
</rss>